//
//  Cartesian.swift.gyb
//  SwiftCheck
//
//  Created by Adam Kuipers on 5/10/16.
//  Copyright Â© 2016 Typelift. All rights reserved.
//

%{
max_arity = 22
}%

extension Gen /*: Cartesian*/ {
	/// Zips together two generators and returns a generator of tuples.
	public static func zip<A1, A2>(ga1 : Gen<A1>, _ ga2 : Gen<A2>) -> Gen<(A1, A2)> {
		return Gen<(A1, A2)> { r, n in
			let (r1, r2) = r.split
			return (ga1.unGen(r1, n), ga2.unGen(r2, n))
		}
	}

	/// Returns a new generator that applies a given function to any outputs the
	/// two receivers create.
	public static func map<A1, A2, R>(ga1 : Gen<A1>, _ ga2 : Gen<A2>, transform: (A1, A2) -> R) -> Gen<R> {
		return zip(ga1, ga2).map(transform)
	}
% for arity in range(3, max_arity + 1):

%{

# Zip definition template
type_parameter_list = ', '.join(['A{0}'.format(n) for n in range(1, arity + 1)])
parameter_list = ', '.join(['_ ga{0} : Gen<A{0}>'.format(n) for n in range(2, arity + 1)])

# Zip body template
previous_parameter_range = range(1, arity)

previous_zip_type_arguments = ', '.join(['A{0}'.format(n) for n in previous_parameter_range])
previous_zip_arguments = ', '.join(['ga{0}'.format(n) for n in previous_parameter_range])
expanded_previous_tuple = ', '.join(['$0.{0}'.format(n - 1) for n in previous_parameter_range])

# Map body template
map_zip_argument_list = ', '.join(['ga{0}'.format(n) for n in range(1, arity + 1)])

}%
	/// Zips together ${arity} generators generator of tuples.
	public static func zip<${type_parameter_list}>(ga1 : Gen<A1>, ${parameter_list}) -> Gen<(${type_parameter_list})> {
		return Gen<(${previous_zip_type_arguments}, A${arity})>
			.zip(
				.zip(${previous_zip_arguments}),
				ga${arity}
			).map {
				(
					${expanded_previous_tuple},
					$$1
				)
			}
	}

	/// Returns a new generator that applies a given function to any outputs the
	/// two receivers create.
	public static func map<${type_parameter_list}, R>(ga1 : Gen<A1>, ${parameter_list}, transform: (${type_parameter_list}) -> R) -> Gen<R> {
		return zip(${map_zip_argument_list}).map(transform)
	}
% end
}
