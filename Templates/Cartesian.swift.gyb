//
//  Cartesian.swift.gyb
//  SwiftCheck
//
//  Created by Adam Kuipers on 5/10/16.
//  Copyright Â© 2016 Typelift. All rights reserved.
//

// This is a GYB generated file; any changes will be overwritten
// during the build phase. Edit the template instead,
// found in Templates/Cartesian.swift.gyb

%{
MAX_ARITY = 22
}%

extension Gen /*: Cartesian*/ {

% for arity in range(3, MAX_ARITY + 1):
%{
# Function definition template
types_list = ['A{0}'.format(n) for n in range(1, arity + 1)]
type_parameter_list = ', '.join(types_list)
parameter_list = ', '.join(['_ ga{0} : Gen<A{0}>'.format(n) for n in range(1, arity + 1)])

# Zip body template
previous_parameter_range = range(1, arity)
current_parameter_range = range(1, arity + 1)

previous_zip_arguments = ', '.join(['ga{0}'.format(n) for n in previous_parameter_range])
nested_map_arguments = ', '.join(['a{0}'.format(n) for n in previous_parameter_range])
expanded_result_tuple = ', '.join(['a{0}'.format(n) for n in current_parameter_range])


# Map body template
map_zip_argument_list = ', '.join(['ga{0}'.format(n) for n in range(1, arity + 1)])
}%
	/// Zips together ${arity} generators into a generator of ${arity}-tuples.
	///
% for (t, p) in zip(types_list, ['ga{0}'.format(n) for n in range(1, arity + 1)]):
	/// - parameter ${p}: A generator of values of type `${t}`.
% end
	public static func zip<${type_parameter_list}>(${parameter_list}) -> Gen<(${type_parameter_list})> {
		return Gen
			.zip(
				.zip(${previous_zip_arguments}),
				ga${arity}
			).map { args in
				let ((${nested_map_arguments}), a${arity}) = args
				return (${expanded_result_tuple})
			}
	}

	/// Returns a new generator that applies a given function to any outputs the
	/// given generators produce.
	///
% for (t, p) in zip(types_list, ['ga{0}'.format(n) for n in range(1, arity + 1)]):
	/// - parameter ${p}: A generator of values of type `${t}`.
% end
	public static func map<${type_parameter_list}, R>(${parameter_list}, transform : @escaping (${type_parameter_list}) -> R) -> Gen<R> {
		return zip(${map_zip_argument_list}).map { args in let (${expanded_result_tuple}) = args; return transform(${expanded_result_tuple}) }
	}

% end
}
